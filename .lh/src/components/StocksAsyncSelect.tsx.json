{
    "sourceFile": "src/components/StocksAsyncSelect.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 93,
            "patches": [
                {
                    "date": 1717815941674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717815955163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n ): Promise<StocksSelectOption[]> => {\n   const queryParams = {\n     search,\n     locale: 'us',\n-    limit: 20,\n+    limit: 10,\n     market: 'stocks',\n     type: 'CS',\n   };\n   try {\n"
                },
                {
                    "date": 1717815991354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n ): Promise<StocksSelectOption[]> => {\n   const queryParams = {\n     search,\n     locale: 'us',\n-    limit: 10,\n+    limit: 20,\n     market: 'stocks',\n     type: 'CS',\n   };\n   try {\n"
                },
                {
                    "date": 1717816000282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n ): Promise<StocksSelectOption[]> => {\n   const queryParams = {\n     search,\n     locale: 'us',\n-    limit: 20,\n+    limit: 20, // max 20 results\n     market: 'stocks',\n     type: 'CS',\n   };\n   try {\n"
                },
                {
                    "date": 1717816029578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n   return useQuery({\n     queryKey: ['tickers', search],\n     queryFn: ({ signal }) => fetchTickers(search, signal),\n     enabled: !!search,\n+    retry:false,\n     refetchOnWindowFocus: false,\n     refetchOnMount: false,\n     staleTime: 5 * 60 * 1000, // 5 minutes\n     gcTime: 10 * 60 * 1000, // 10 minutes\n"
                },
                {
                    "date": 1717816039696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   return useQuery({\n     queryKey: ['tickers', search],\n     queryFn: ({ signal }) => fetchTickers(search, signal),\n     enabled: !!search,\n-    retry:false,\n+    retry: false,\n     refetchOnWindowFocus: false,\n     refetchOnMount: false,\n     staleTime: 5 * 60 * 1000, // 5 minutes\n     gcTime: 10 * 60 * 1000, // 10 minutes\n"
                },
                {
                    "date": 1717816066247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n     queryKey: ['tickers', search],\n     queryFn: ({ signal }) => fetchTickers(search, signal),\n     enabled: !!search,\n     retry: false,\n+    retryOnMount: false,\n     refetchOnWindowFocus: false,\n     refetchOnMount: false,\n     staleTime: 5 * 60 * 1000, // 5 minutes\n     gcTime: 10 * 60 * 1000, // 10 minutes\n"
                },
                {
                    "date": 1717835987740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 500); // 500ms debounce\n+  const [debouncedInputValue] = useDebounce(inputValue, 800);\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n"
                },
                {
                    "date": 1717836076802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,21 +39,8 @@\n     throw new Error(e as string);\n   }\n };\n \n-const useFetchTickers = (search: string) => {\n-  return useQuery({\n-    queryKey: ['tickers', search],\n-    queryFn: ({ signal }) => fetchTickers(search, signal),\n-    enabled: !!search,\n-    retry: false,\n-    retryOnMount: false,\n-    refetchOnWindowFocus: false,\n-    refetchOnMount: false,\n-    staleTime: 5 * 60 * 1000, // 5 minutes\n-    gcTime: 10 * 60 * 1000, // 10 minutes\n-  });\n-};\n \n const StocksAsyncSelect: React.FC<StocksAsyncSelectProps> = ({\n   onChange,\n   isDisabled,\n"
                },
                {
                    "date": 1717836090787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,29 +17,8 @@\n   ) => void;\n   isDisabled?: boolean;\n }\n \n-const fetchTickers = async (\n-  search: string,\n-  signal?: AbortSignal,\n-): Promise<StocksSelectOption[]> => {\n-  const queryParams = {\n-    search,\n-    locale: 'us',\n-    limit: 20, // max 20 results\n-    market: 'stocks',\n-    type: 'CS',\n-  };\n-  try {\n-    const response = await TickersService.tickers(queryParams, signal);\n-    return response.data.results.map((ticker) => ({\n-      label: `${ticker.name} (${ticker.ticker})`,\n-      value: ticker.ticker,\n-    }));\n-  } catch (e) {\n-    throw new Error(e as string);\n-  }\n-};\n \n \n const StocksAsyncSelect: React.FC<StocksAsyncSelectProps> = ({\n   onChange,\n"
                },
                {
                    "date": 1717836139062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { useQueryClient, useQuery } from '@tanstack/react-query';\n import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n+import useFetchTickers from './StocksAsyncSelect.hooks';\n \n export interface StocksSelectOption {\n   label: string;\n   value: string;\n@@ -17,10 +18,8 @@\n   ) => void;\n   isDisabled?: boolean;\n }\n \n-\n-\n const StocksAsyncSelect: React.FC<StocksAsyncSelectProps> = ({\n   onChange,\n   isDisabled,\n }) => {\n"
                },
                {
                    "date": 1717836158457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useQueryClient, useQuery } from '@tanstack/react-query';\n import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n-import useFetchTickers from './StocksAsyncSelect.hooks';\n+import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n export interface StocksSelectOption {\n   label: string;\n   value: string;\n"
                },
                {
                    "date": 1717836236375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState } from 'react';\n-import TickersService from '@/api/services/Tickers';\n import { useQueryClient, useQuery } from '@tanstack/react-query';\n import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n"
                },
                {
                    "date": 1717836260717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState } from 'react';\n-import { useQueryClient, useQuery } from '@tanstack/react-query';\n+import { useQueryClient } from '@tanstack/react-query';\n import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n"
                },
                {
                    "date": 1717836435059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 800);\n+  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n"
                },
                {
                    "date": 1717836604384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,11 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(\"\");\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n"
                },
                {
                    "date": 1717836613333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,11 +22,12 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n+  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(\"\");\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n"
                },
                {
                    "date": 1717836955682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n+  const [debouncedInputValue] = useDebounce(inputValue, 800);\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n"
                },
                {
                    "date": 1717836962187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n-    // update input value to trigger debounce\n+    // update input value to trigger refetch\n     setInputValue(inputValue);\n \n     // get cached data if found\n     const queryKey = ['tickers', inputValue];\n"
                },
                {
                    "date": 1717836974319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \n     // update input value to trigger refetch\n     setInputValue(inputValue);\n \n-    // get cached data if found\n+    // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n"
                },
                {
                    "date": 1717837031827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n+    // if no cached data, manual fetch and return \n     return await queryClient.fetchQuery({\n       queryKey,\n       queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n"
                },
                {
                    "date": 1717837044275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch\n+    // update input value to trigger refetch (background)\n     setInputValue(inputValue);\n \n     // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n"
                },
                {
                    "date": 1717837060413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,17 @@\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch (background)\n+    // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n \n     // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n-    // if no cached data, manual fetch and return \n+    // if no cached data, manual fetch and return res\n     return await queryClient.fetchQuery({\n       queryKey,\n       queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n"
                },
                {
                    "date": 1717837101932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebounce } from 'use-debounce';\n+import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -22,28 +22,38 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 800);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n+  const debouncedFetchTickers = useDebouncedCallback(\n+    async (\n+      inputValue: string,\n+      resolve: (value: StocksSelectOption[]) => void,\n+    ) => {\n+      const queryKey = ['tickers', inputValue];\n+      const cachedData =\n+        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+      if (cachedData) {\n+        resolve(cachedData);\n+      } else {\n+        const result = await queryClient.fetchQuery({\n+          queryKey,\n+          queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+        });\n+        resolve(result);\n+      }\n+    },\n+    1000,\n+  );\n \n-    // update input value to trigger refetch (background), works like prefetch\n+  const loadOptions = (inputValue: string) => {\n     setInputValue(inputValue);\n-\n-    // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n-\n-    // if no cached data, manual fetch and return res\n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    if (!inputValue?.length) return Promise.resolve([]);\n+    return new Promise<StocksSelectOption[]>((resolve) => {\n+      debouncedFetchTickers(inputValue, resolve);\n     });\n   };\n \n   const noOptionsMessage = () => {\n"
                },
                {
                    "date": 1717837163855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebouncedCallback } from 'use-debounce';\n+import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -22,38 +22,28 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n+  const [debouncedInputValue] = useDebounce(inputValue, 800);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(inputValue);\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n-  const debouncedFetchTickers = useDebouncedCallback(\n-    async (\n-      inputValue: string,\n-      resolve: (value: StocksSelectOption[]) => void,\n-    ) => {\n-      const queryKey = ['tickers', inputValue];\n-      const cachedData =\n-        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-      if (cachedData) {\n-        resolve(cachedData);\n-      } else {\n-        const result = await queryClient.fetchQuery({\n-          queryKey,\n-          queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-        });\n-        resolve(result);\n-      }\n-    },\n-    1000,\n-  );\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n \n-  const loadOptions = (inputValue: string) => {\n+    // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n-    if (!inputValue?.length) return Promise.resolve([]);\n-    return new Promise<StocksSelectOption[]>((resolve) => {\n-      debouncedFetchTickers(inputValue, resolve);\n+\n+    // get cached data if there is any\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n+\n+    // if no cached data, manual fetch and return res\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n   };\n \n   const noOptionsMessage = () => {\n"
                },
                {
                    "date": 1717837177309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,11 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 800);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n"
                },
                {
                    "date": 1717837303393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebounce } from 'use-debounce';\n+import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -26,24 +26,30 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n+  const debouncedLoadOptions = useDebouncedCallback(\n+    async (inputValue: string) => {\n+      if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch (background), works like prefetch\n-    setInputValue(inputValue);\n+      // get cached data if there is any\n+      const queryKey = ['tickers', inputValue];\n+      const cachedData =\n+        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+      if (cachedData) return cachedData;\n \n-    // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n+      // if no cached data, manual fetch and return res\n+      return await queryClient.fetchQuery({\n+        queryKey,\n+        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+      });\n+    },\n+    1000,\n+  ); // debounce delay in ms\n \n-    // if no cached data, manual fetch and return res\n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-    });\n+  const loadOptions = async (inputValue: string) => {\n+    setInputValue(inputValue);\n+    return debouncedLoadOptions(inputValue);\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717837328382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -26,30 +25,24 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const debouncedLoadOptions = useDebouncedCallback(\n-    async (inputValue: string) => {\n-      if (!inputValue?.length) return [];\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n \n-      // get cached data if there is any\n-      const queryKey = ['tickers', inputValue];\n-      const cachedData =\n-        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-      if (cachedData) return cachedData;\n+    // update input value to trigger refetch (background), works like prefetch\n+    setInputValue(inputValue);\n \n-      // if no cached data, manual fetch and return res\n-      return await queryClient.fetchQuery({\n-        queryKey,\n-        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-      });\n-    },\n-    1000,\n-  ); // debounce delay in ms\n+    // get cached data if there is any\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n \n-  const loadOptions = async (inputValue: string) => {\n-    setInputValue(inputValue);\n-    return debouncedLoadOptions(inputValue);\n+    // if no cached data, manual fetch and return res\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    });\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717837511705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -21,27 +22,32 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n+  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(inputValue);\n+  // Fetch tickers with the current debounced input value\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n+  // Load options function\n   const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n-\n-    // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n \n-    // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n+    // Wait for the debounced value to update\n+    const debouncedValue = await new Promise<string>((resolve) => {\n+      setTimeout(() => resolve(inputValue), 1000);\n+    });\n+\n+    if (!debouncedValue?.length) return [];\n+\n+    const queryKey = ['tickers', debouncedValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n-    // if no cached data, manual fetch and return res\n     return await queryClient.fetchQuery({\n       queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+      queryFn: ({ signal }) => fetchTickers(debouncedValue, signal),\n     });\n   };\n \n   const noOptionsMessage = () => {\n"
                },
                {
                    "date": 1717837568966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -22,32 +21,27 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  // Fetch tickers with the current debounced input value\n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  // Load options function\n   const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n+\n+    // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n \n-    // Wait for the debounced value to update\n-    const debouncedValue = await new Promise<string>((resolve) => {\n-      setTimeout(() => resolve(inputValue), 1000);\n-    });\n-\n-    if (!debouncedValue?.length) return [];\n-\n-    const queryKey = ['tickers', debouncedValue];\n+    // get cached data if there is any\n+    const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n+    // if no cached data, manual fetch and return res\n     return await queryClient.fetchQuery({\n       queryKey,\n-      queryFn: ({ signal }) => fetchTickers(debouncedValue, signal),\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n   };\n \n   const noOptionsMessage = () => {\n"
                },
                {
                    "date": 1717837659275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import React, { useState } from 'react';\n+import React, { useState, useCallback } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebounceCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -25,24 +26,31 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n+  const loadOptions = useCallback(\n+    async (inputValue: string) => {\n+      if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch (background), works like prefetch\n-    setInputValue(inputValue);\n+      // get cached data if there is any\n+      const queryKey = ['tickers', inputValue];\n+      const cachedData =\n+        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+      if (cachedData) return cachedData;\n \n-    // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n+      // if no cached data, manual fetch and return res\n+      return await queryClient.fetchQuery({\n+        queryKey,\n+        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+      });\n+    },\n+    [queryClient],\n+  );\n \n-    // if no cached data, manual fetch and return res\n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-    });\n+  const debouncedLoadOptions = useDebounceCallback(loadOptions, 1000);\n+\n+  const handleInputChange = (newInputValue: string) => {\n+    setInputValue(newInputValue);\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n@@ -56,9 +64,10 @@\n       placeholder=\"Type to search stocks ...\"\n       defaultOptions={cachedData ?? []}\n       noOptionsMessage={noOptionsMessage}\n       onChange={onChange}\n-      loadOptions={loadOptions}\n+      onInputChange={handleInputChange}\n+      loadOptions={debouncedLoadOptions}\n       isMulti={false}\n       isDisabled={isDisabled}\n     />\n   );\n"
                },
                {
                    "date": 1717837710270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-import React, { useState, useCallback } from 'react';\n+import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebounceCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -26,31 +25,24 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = useCallback(\n-    async (inputValue: string) => {\n-      if (!inputValue?.length) return [];\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n \n-      // get cached data if there is any\n-      const queryKey = ['tickers', inputValue];\n-      const cachedData =\n-        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-      if (cachedData) return cachedData;\n+    // update input value to trigger refetch (background), works like prefetch\n+    setInputValue(inputValue);\n \n-      // if no cached data, manual fetch and return res\n-      return await queryClient.fetchQuery({\n-        queryKey,\n-        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-      });\n-    },\n-    [queryClient],\n-  );\n+    // get cached data if there is any\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n \n-  const debouncedLoadOptions = useDebounceCallback(loadOptions, 1000);\n-\n-  const handleInputChange = (newInputValue: string) => {\n-    setInputValue(newInputValue);\n+    // if no cached data, manual fetch and return res\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    });\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n@@ -64,10 +56,9 @@\n       placeholder=\"Type to search stocks ...\"\n       defaultOptions={cachedData ?? []}\n       noOptionsMessage={noOptionsMessage}\n       onChange={onChange}\n-      onInputChange={handleInputChange}\n-      loadOptions={debouncedLoadOptions}\n+      loadOptions={loadOptions}\n       isMulti={false}\n       isDisabled={isDisabled}\n     />\n   );\n"
                },
                {
                    "date": 1717837752502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebounceCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -25,24 +26,31 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n+  const debouncedLoadOptions = useDebounceCallback(\n+    async (inputValue: string) => {\n+      if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch (background), works like prefetch\n-    setInputValue(inputValue);\n+      // get cached data if there is any\n+      const queryKey = ['tickers', inputValue];\n+      const cachedData =\n+        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+      if (cachedData) return cachedData;\n \n-    // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n+      // if no cached data, manual fetch and return res\n+      return await queryClient.fetchQuery({\n+        queryKey,\n+        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+      });\n+    },\n+    1000,\n+    { maxWait: 2000 },\n+  );\n \n-    // if no cached data, manual fetch and return res\n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-    });\n+  const handleInputChange = async (newInputValue: string) => {\n+    setInputValue(newInputValue);\n+    return debouncedLoadOptions(newInputValue);\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n@@ -56,9 +64,9 @@\n       placeholder=\"Type to search stocks ...\"\n       defaultOptions={cachedData ?? []}\n       noOptionsMessage={noOptionsMessage}\n       onChange={onChange}\n-      loadOptions={loadOptions}\n+      loadOptions={handleInputChange}\n       isMulti={false}\n       isDisabled={isDisabled}\n     />\n   );\n"
                },
                {
                    "date": 1717837775726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebounceCallback } from 'use-debounce';\n+import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n"
                },
                {
                    "date": 1717837842510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -26,31 +25,24 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const debouncedLoadOptions = useDebounceCallback(\n-    async (inputValue: string) => {\n-      if (!inputValue?.length) return [];\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n \n-      // get cached data if there is any\n-      const queryKey = ['tickers', inputValue];\n-      const cachedData =\n-        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-      if (cachedData) return cachedData;\n+    // update input value to trigger refetch (background), works like prefetch\n+    setInputValue(inputValue);\n \n-      // if no cached data, manual fetch and return res\n-      return await queryClient.fetchQuery({\n-        queryKey,\n-        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-      });\n-    },\n-    1000,\n-    { maxWait: 2000 },\n-  );\n+    // get cached data if there is any\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n \n-  const handleInputChange = async (newInputValue: string) => {\n-    setInputValue(newInputValue);\n-    return debouncedLoadOptions(newInputValue);\n+    // if no cached data, manual fetch and return res\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    });\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n@@ -64,9 +56,9 @@\n       placeholder=\"Type to search stocks ...\"\n       defaultOptions={cachedData ?? []}\n       noOptionsMessage={noOptionsMessage}\n       onChange={onChange}\n-      loadOptions={handleInputChange}\n+      loadOptions={loadOptions}\n       isMulti={false}\n       isDisabled={isDisabled}\n     />\n   );\n"
                },
                {
                    "date": 1717837871904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from 'react';\n+import React, { useState, useRef, useCallback } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n@@ -22,27 +22,44 @@\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n   const queryClient = useQueryClient();\n+  const debounceRef = useRef<NodeJS.Timeout | null>(null);\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n+  const debouncedLoadOptions = useCallback(\n+    (inputValue: string) => {\n+      return new Promise<StocksSelectOption[]>((resolve) => {\n+        if (debounceRef.current) {\n+          clearTimeout(debounceRef.current);\n+        }\n \n-    // update input value to trigger refetch (background), works like prefetch\n-    setInputValue(inputValue);\n+        debounceRef.current = setTimeout(async () => {\n+          if (!inputValue?.length) return resolve([]);\n \n-    // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n+          // get cached data if there is any\n+          const queryKey = ['tickers', inputValue];\n+          const cachedData =\n+            queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+          if (cachedData) return resolve(cachedData);\n \n-    // if no cached data, manual fetch and return res\n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-    });\n+          // if no cached data, manual fetch and return res\n+          const result = await queryClient.fetchQuery({\n+            queryKey,\n+            queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+          });\n+\n+          resolve(result);\n+        }, 1000);\n+      });\n+    },\n+    [queryClient],\n+  );\n+\n+  const loadOptions = async (inputValue: string) => {\n+    setInputValue(inputValue);\n+    return await debouncedLoadOptions(inputValue);\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717837888882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useRef, useCallback } from 'react';\n+import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n@@ -22,44 +22,27 @@\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n   const queryClient = useQueryClient();\n-  const debounceRef = useRef<NodeJS.Timeout | null>(null);\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const debouncedLoadOptions = useCallback(\n-    (inputValue: string) => {\n-      return new Promise<StocksSelectOption[]>((resolve) => {\n-        if (debounceRef.current) {\n-          clearTimeout(debounceRef.current);\n-        }\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n \n-        debounceRef.current = setTimeout(async () => {\n-          if (!inputValue?.length) return resolve([]);\n+    // update input value to trigger refetch (background), works like prefetch\n+    setInputValue(inputValue);\n \n-          // get cached data if there is any\n-          const queryKey = ['tickers', inputValue];\n-          const cachedData =\n-            queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-          if (cachedData) return resolve(cachedData);\n+    // get cached data if there is any\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n \n-          // if no cached data, manual fetch and return res\n-          const result = await queryClient.fetchQuery({\n-            queryKey,\n-            queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-          });\n-\n-          resolve(result);\n-        }, 1000);\n-      });\n-    },\n-    [queryClient],\n-  );\n-\n-  const loadOptions = async (inputValue: string) => {\n-    setInputValue(inputValue);\n-    return await debouncedLoadOptions(inputValue);\n+    // if no cached data, manual fetch and return res\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    });\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717837933971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import React, { useState } from 'react';\n+import React, { useState, useCallback } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -21,29 +22,33 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n+  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(inputValue);\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n+  const loadOptions = useCallback(\n+    async (inputValue: string) => {\n+      setInputValue(inputValue);\n \n-    // update input value to trigger refetch (background), works like prefetch\n-    setInputValue(inputValue);\n+      if (!inputValue?.length) return [];\n \n-    // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n+      // get cached data if there is any\n+      const queryKey = ['tickers', inputValue];\n+      const cachedData =\n+        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+      if (cachedData) return cachedData;\n \n-    // if no cached data, manual fetch and return res\n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-    });\n-  };\n+      // if no cached data, manual fetch and return res\n+      return await queryClient.fetchQuery({\n+        queryKey,\n+        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+      });\n+    },\n+    [queryClient],\n+  );\n \n   const noOptionsMessage = () => {\n     if (isError) {\n       return 'Please wait before searching again.';\n"
                },
                {
                    "date": 1717837953839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-import React, { useState, useCallback } from 'react';\n+import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -22,33 +21,29 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = useCallback(\n-    async (inputValue: string) => {\n-      setInputValue(inputValue);\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n \n-      if (!inputValue?.length) return [];\n+    // update input value to trigger refetch (background), works like prefetch\n+    setInputValue(inputValue);\n \n-      // get cached data if there is any\n-      const queryKey = ['tickers', inputValue];\n-      const cachedData =\n-        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-      if (cachedData) return cachedData;\n+    // get cached data if there is any\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n \n-      // if no cached data, manual fetch and return res\n-      return await queryClient.fetchQuery({\n-        queryKey,\n-        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-      });\n-    },\n-    [queryClient],\n-  );\n+    // if no cached data, manual fetch and return res\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    });\n+  };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n       return 'Please wait before searching again.';\n"
                },
                {
                    "date": 1717838028924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n+  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n"
                },
                {
                    "date": 1717838045171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { useQueryClient } from '@tanstack/react-query';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n+import { useDebounce } from 'use-debounce';\n \n export interface StocksSelectOption {\n   label: string;\n   value: string;\n"
                },
                {
                    "date": 1717838064867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,16 +34,16 @@\n     // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n \n     // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n+    const queryKey = ['tickers', debouncedInputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n     // if no cached data, manual fetch and return res\n     return await queryClient.fetchQuery({\n       queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+      queryFn: ({ signal }) => fetchTickers(debouncedInputValue, signal),\n     });\n   };\n \n   const noOptionsMessage = () => {\n"
                },
                {
                    "date": 1717838074892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   const [inputValue, setInputValue] = useState('');\n   const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(inputValue);\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n"
                },
                {
                    "date": 1717838179760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n \n     // get cached data if there is any\n-    const queryKey = ['tickers', debouncedInputValue];\n+    const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n     // if no cached data, manual fetch and return res\n"
                },
                {
                    "date": 1717838204422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,18 +25,18 @@\n   const [inputValue, setInputValue] = useState('');\n   const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n     // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n \n     // get cached data if there is any\n-    const queryKey = ['tickers', inputValue];\n+    const queryKey = ['tickers', debouncedInputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n     // if no cached data, manual fetch and return res\n"
                },
                {
                    "date": 1717838256783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   const [inputValue, setInputValue] = useState('');\n   const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(inputValue);\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n"
                },
                {
                    "date": 1717838379504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,15 +36,9 @@\n \n     // get cached data if there is any\n     const queryKey = ['tickers', debouncedInputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n-\n-    // if no cached data, manual fetch and return res\n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(debouncedInputValue, signal),\n-    });\n+    return cachedData;\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717838396316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,15 @@\n \n     // get cached data if there is any\n     const queryKey = ['tickers', debouncedInputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    return cachedData;\n+    if (cachedData) return cachedData;\n+\n+    // if no cached data, manual fetch and return res\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(debouncedInputValue, signal),\n+    });\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717838424466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,8 @@\n const StocksAsyncSelect: React.FC<StocksAsyncSelectProps> = ({\n   onChange,\n   isDisabled,\n }) => {\n-  const [inputValue, setInputValue] = useState('');\n   const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n"
                },
                {
                    "date": 1717838437736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,18 +21,16 @@\n const StocksAsyncSelect: React.FC<StocksAsyncSelectProps> = ({\n   onChange,\n   isDisabled,\n }) => {\n-  const [debouncedInputValue] = useDebounce(inputValue, 1000);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(\"\");\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n     // update input value to trigger refetch (background), works like prefetch\n-    setInputValue(inputValue);\n \n     // get cached data if there is any\n     const queryKey = ['tickers', debouncedInputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n"
                },
                {
                    "date": 1717838447353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,24 +23,24 @@\n   isDisabled,\n }) => {\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(\"\");\n+  const { data: cachedData, isError } = useFetchTickers('');\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n     // update input value to trigger refetch (background), works like prefetch\n \n     // get cached data if there is any\n-    const queryKey = ['tickers', debouncedInputValue];\n+    const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n     // if no cached data, manual fetch and return res\n     return await queryClient.fetchQuery({\n       queryKey,\n-      queryFn: ({ signal }) => fetchTickers(debouncedInputValue, signal),\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n   };\n \n   const noOptionsMessage = () => {\n"
                },
                {
                    "date": 1717838479584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n-import React, { useState } from 'react';\n+import React,  from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n-import { useDebounce } from 'use-debounce';\n \n export interface StocksSelectOption {\n   label: string;\n   value: string;\n"
                },
                {
                    "date": 1717838512784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React,  from 'react';\n+import React from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n"
                },
                {
                    "date": 1717838554926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import React from 'react';\n+import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -20,23 +21,25 @@\n const StocksAsyncSelect: React.FC<StocksAsyncSelectProps> = ({\n   onChange,\n   isDisabled,\n }) => {\n+  const [inputValue, setInputValue] = useState('');\n+  const [debouncedInputValue] = useDebounce(inputValue, 800);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers('');\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch (background), works like prefetch\n+    // update input value to trigger refetch\n+    setInputValue(inputValue);\n \n     // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n-    // if no cached data, manual fetch and return res\n     return await queryClient.fetchQuery({\n       queryKey,\n       queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n"
                },
                {
                    "date": 1717838582279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,11 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 800);\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(\"\");\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n"
                },
                {
                    "date": 1717838601166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n }) => {\n   const [inputValue, setInputValue] = useState('');\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(\"\");\n+  const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n"
                },
                {
                    "date": 1717838664904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,8 @@\n     setInputValue(inputValue);\n \n     // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n-\n     return await queryClient.fetchQuery({\n       queryKey,\n       queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n"
                },
                {
                    "date": 1717838691592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,11 @@\n     setInputValue(inputValue);\n \n     // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n+\n     return await queryClient.fetchQuery({\n       queryKey,\n       queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n"
                },
                {
                    "date": 1717838778743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n"
                },
                {
                    "date": 1717839193630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n-import React, { useState } from 'react';\n+import React, { useState, useCallback } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n+import useDebounce from './useDebounce';\n \n export interface StocksSelectOption {\n   label: string;\n   value: string;\n@@ -21,18 +22,16 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n+  const debouncedInputValue = useDebounce(inputValue, 500); // Debounce for 500ms\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(inputValue);\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch\n-    setInputValue(inputValue);\n-\n     // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n@@ -49,8 +48,12 @@\n     }\n     return 'No stocks found';\n   };\n \n+  const handleInputChange = useCallback((newValue: string) => {\n+    setInputValue(newValue);\n+  }, []);\n+\n   return (\n     <AsyncSelect\n       placeholder=\"Type to search stocks ...\"\n       defaultOptions={cachedData ?? []}\n@@ -58,9 +61,31 @@\n       onChange={onChange}\n       loadOptions={loadOptions}\n       isMulti={false}\n       isDisabled={isDisabled}\n+      onInputChange={handleInputChange}\n     />\n   );\n };\n \n export default StocksAsyncSelect;\n+\n+// useDebounce.js\n+import { useState, useEffect } from 'react';\n+\n+const useDebounce = (value: string, delay: number) => {\n+  const [debouncedValue, setDebouncedValue] = useState(value);\n+\n+  useEffect(() => {\n+    const handler = setTimeout(() => {\n+      setDebouncedValue(value);\n+    }, delay);\n+\n+    return () => {\n+      clearTimeout(handler);\n+    };\n+  }, [value, delay]);\n+\n+  return debouncedValue;\n+};\n+\n+export default useDebounce;\n"
                },
                {
                    "date": 1717839219187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,25 +67,4 @@\n   );\n };\n \n export default StocksAsyncSelect;\n-\n-// useDebounce.js\n-import { useState, useEffect } from 'react';\n-\n-const useDebounce = (value: string, delay: number) => {\n-  const [debouncedValue, setDebouncedValue] = useState(value);\n-\n-  useEffect(() => {\n-    const handler = setTimeout(() => {\n-      setDebouncedValue(value);\n-    }, delay);\n-\n-    return () => {\n-      clearTimeout(handler);\n-    };\n-  }, [value, delay]);\n-\n-  return debouncedValue;\n-};\n-\n-export default useDebounce;\n"
                },
                {
                    "date": 1717839234185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const debouncedInputValue = useDebounce(inputValue, 500); // Debounce for 500ms\n+  const [debouncedInputValue] = useDebounce(inputValue, 500); // Debounce for 500ms\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n"
                },
                {
                    "date": 1717839239439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n-import React, { useState, useCallback } from 'react';\n+import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n-import useDebounce from './useDebounce';\n \n export interface StocksSelectOption {\n   label: string;\n   value: string;\n@@ -22,16 +21,18 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 500); // Debounce for 500ms\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n+    // update input value to trigger refetch\n+    setInputValue(inputValue);\n+\n     // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n@@ -48,12 +49,8 @@\n     }\n     return 'No stocks found';\n   };\n \n-  const handleInputChange = useCallback((newValue: string) => {\n-    setInputValue(newValue);\n-  }, []);\n-\n   return (\n     <AsyncSelect\n       placeholder=\"Type to search stocks ...\"\n       defaultOptions={cachedData ?? []}\n@@ -61,9 +58,8 @@\n       onChange={onChange}\n       loadOptions={loadOptions}\n       isMulti={false}\n       isDisabled={isDisabled}\n-      onInputChange={handleInputChange}\n     />\n   );\n };\n \n"
                },
                {
                    "date": 1717839314930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,12 +28,10 @@\n \n   const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch\n     setInputValue(inputValue);\n \n-    // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n"
                },
                {
                    "date": 1717839328060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n     if (!inputValue?.length) return [];\n \n     setInputValue(inputValue);\n \n+    // prevent dupilcaites network reqeusts\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n"
                },
                {
                    "date": 1717839342489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     if (!inputValue?.length) return [];\n \n     setInputValue(inputValue);\n \n-    // prevent dupilcaites network reqeusts\n+    // prevent dupilcaite network rrequests\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n"
                },
                {
                    "date": 1717839381475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import React, { useState } from 'react';\n+import React, { useState, useCallback } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -21,28 +22,18 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n+  const [debouncedInputValue] = useDebounce(inputValue, 1000); // debounce for 1 second\n   const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(inputValue);\n+  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n-\n+  const loadOptions = useCallback(async (inputValue: string) => {\n     setInputValue(inputValue);\n+    return [];\n+  }, []);\n \n-    // prevent dupilcaite network rrequests\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n-\n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-    });\n-  };\n-\n   const noOptionsMessage = () => {\n     if (isError) {\n       return 'Please wait before searching again.';\n     }\n"
                },
                {
                    "date": 1717839395249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n import React, { useState, useCallback } from 'react';\n-import { useQueryClient } from '@tanstack/react-query';\n import { useDebounce } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n-import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n+import useFetchTickers,  from './StocksAsyncSelect.hooks';\n \n export interface StocksSelectOption {\n   label: string;\n   value: string;\n@@ -23,9 +22,8 @@\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n   const [debouncedInputValue] = useDebounce(inputValue, 1000); // debounce for 1 second\n-  const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n \n   const loadOptions = useCallback(async (inputValue: string) => {\n"
                },
                {
                    "date": 1717839423840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-import React, { useState, useCallback } from 'react';\n-import { useDebounce } from 'use-debounce';\n+import React, { useState } from 'react';\n+import { useQueryClient } from '@tanstack/react-query';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n-import useFetchTickers,  from './StocksAsyncSelect.hooks';\n+import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n export interface StocksSelectOption {\n   label: string;\n   value: string;\n@@ -21,17 +21,28 @@\n   onChange,\n   isDisabled,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n-  const [debouncedInputValue] = useDebounce(inputValue, 1000); // debounce for 1 second\n+  const queryClient = useQueryClient();\n \n-  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n+  const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = useCallback(async (inputValue: string) => {\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n+\n     setInputValue(inputValue);\n-    return [];\n-  }, []);\n \n+    // prevent dupliate network rrequests\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n+\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    });\n+  };\n+\n   const noOptionsMessage = () => {\n     if (isError) {\n       return 'Please wait before searching again.';\n     }\n"
                },
                {
                    "date": 1717839728013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import React, { useState } from 'react';\n+import React, { useState, useCallback } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -25,24 +26,45 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n+  const debouncedLoadOptions = useDebouncedCallback(\n+    async (inputValue: string, callback) => {\n+      if (!inputValue?.length) {\n+        callback([]);\n+        return;\n+      }\n \n-    setInputValue(inputValue);\n+      // update input value to trigger refetch (background), works like prefetch\n+      setInputValue(inputValue);\n \n-    // prevent dupliate network rrequests\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n+      // get cached data if there is any\n+      const queryKey = ['tickers', inputValue];\n+      const cachedData =\n+        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+      if (cachedData) {\n+        callback(cachedData);\n+        return;\n+      }\n \n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-    });\n-  };\n+      // if no cached data, manual fetch and return res\n+      const result = await queryClient.fetchQuery({\n+        queryKey,\n+        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+      });\n \n+      callback(result);\n+    },\n+    1000,\n+  ); // 1 second debounce\n+\n+  const loadOptions = useCallback(\n+    (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n+      debouncedLoadOptions(inputValue, callback);\n+    },\n+    [debouncedLoadOptions],\n+  );\n+\n   const noOptionsMessage = () => {\n     if (isError) {\n       return 'Please wait before searching again.';\n     }\n"
                },
                {
                    "date": 1717839895701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const debouncedLoadOptions = useDebouncedCallback(\n-    async (inputValue: string, callback) => {\n+    async (inputValue: string, callback: () => any) => {\n       if (!inputValue?.length) {\n         callback([]);\n         return;\n       }\n"
                },
                {
                    "date": 1717839909963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const debouncedLoadOptions = useDebouncedCallback(\n-    async (inputValue: string, callback: () => any) => {\n+    async (inputValue: string, callback: (items: any) => any) => {\n       if (!inputValue?.length) {\n         callback([]);\n         return;\n       }\n"
                },
                {
                    "date": 1717839937242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,12 @@\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const debouncedLoadOptions = useDebouncedCallback(\n-    async (inputValue: string, callback: (items: any) => any) => {\n+    async (\n+      inputValue: string,\n+      callback: (items: any) => StocksSelectOption[],\n+    ) => {\n       if (!inputValue?.length) {\n         callback([]);\n         return;\n       }\n"
                },
                {
                    "date": 1717839954719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n   const debouncedLoadOptions = useDebouncedCallback(\n     async (\n       inputValue: string,\n-      callback: (items: any) => StocksSelectOption[],\n+      callback: (input: string) => StocksSelectOption[],\n     ) => {\n       if (!inputValue?.length) {\n         callback([]);\n         return;\n"
                },
                {
                    "date": 1717839975547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n   const debouncedLoadOptions = useDebouncedCallback(\n     async (\n       inputValue: string,\n-      callback: (input: string) => StocksSelectOption[],\n+      callback: (input: string) => StocksSelectOption[] | [],\n     ) => {\n       if (!inputValue?.length) {\n         callback([]);\n         return;\n"
                },
                {
                    "date": 1717840003388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n   const debouncedLoadOptions = useDebouncedCallback(\n     async (\n       inputValue: string,\n-      callback: (input: string) => StocksSelectOption[] | [],\n+      callback: (input: string) => StocksSelectOption[],\n     ) => {\n       if (!inputValue?.length) {\n         callback([]);\n         return;\n"
                },
                {
                    "date": 1717840010481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n       inputValue: string,\n       callback: (input: string) => StocksSelectOption[],\n     ) => {\n       if (!inputValue?.length) {\n-        callback([]);\n+        callback(\"\");\n         return;\n       }\n \n       // update input value to trigger refetch (background), works like prefetch\n"
                },
                {
                    "date": 1717840026563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,11 @@\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const debouncedLoadOptions = useDebouncedCallback(\n-    async (\n-      inputValue: string,\n-      callback: (input: string) => StocksSelectOption[],\n-    ) => {\n+    async (inputValue: string, callback: (items: any) => StocksSelectOption[]) => {\n       if (!inputValue?.length) {\n-        callback(\"\");\n+        callback([]);\n         return;\n       }\n \n       // update input value to trigger refetch (background), works like prefetch\n"
                },
                {
                    "date": 1717840056878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const debouncedLoadOptions = useDebouncedCallback(\n-    async (inputValue: string, callback: (items: any) => StocksSelectOption[]) => {\n+    async (inputValue: string, callback: (items: any) => void) => {\n       if (!inputValue?.length) {\n         callback([]);\n         return;\n       }\n"
                },
                {
                    "date": 1717840110837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,15 +56,8 @@\n     },\n     1000,\n   ); // 1 second debounce\n \n-  const loadOptions = useCallback(\n-    (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n-      debouncedLoadOptions(inputValue, callback);\n-    },\n-    [debouncedLoadOptions],\n-  );\n-\n   const noOptionsMessage = () => {\n     if (isError) {\n       return 'Please wait before searching again.';\n     }\n@@ -76,9 +69,9 @@\n       placeholder=\"Type to search stocks ...\"\n       defaultOptions={cachedData ?? []}\n       noOptionsMessage={noOptionsMessage}\n       onChange={onChange}\n-      loadOptions={loadOptions}\n+      loadOptions={debouncedLoadOptions}\n       isMulti={false}\n       isDisabled={isDisabled}\n     />\n   );\n"
                },
                {
                    "date": 1717840176220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,15 @@\n     },\n     1000,\n   ); // 1 second debounce\n \n+  const loadOptions = useCallback(\n+    (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n+      debouncedLoadOptions(inputValue, callback);\n+    },\n+    [debouncedLoadOptions],\n+  );\n+\n   const noOptionsMessage = () => {\n     if (isError) {\n       return 'Please wait before searching again.';\n     }\n@@ -69,9 +76,9 @@\n       placeholder=\"Type to search stocks ...\"\n       defaultOptions={cachedData ?? []}\n       noOptionsMessage={noOptionsMessage}\n       onChange={onChange}\n-      loadOptions={debouncedLoadOptions}\n+      loadOptions={loadOptions}\n       isMulti={false}\n       isDisabled={isDisabled}\n     />\n   );\n"
                },
                {
                    "date": 1717840186378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n   ); // 1 second debounce\n \n   const loadOptions = useCallback(\n     (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n+      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n       debouncedLoadOptions(inputValue, callback);\n     },\n     [debouncedLoadOptions],\n   );\n"
                },
                {
                    "date": 1717840320023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,12 @@\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n   const debouncedLoadOptions = useDebouncedCallback(\n-    async (inputValue: string, callback: (items: any) => void) => {\n+    async (\n+      inputValue: string,\n+      callback: (options: StocksSelectOption[]) => void,\n+    ) => {\n       if (!inputValue?.length) {\n         callback([]);\n         return;\n       }\n"
                },
                {
                    "date": 1717840332189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n   ); // 1 second debounce\n \n   const loadOptions = useCallback(\n     (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n-      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n       debouncedLoadOptions(inputValue, callback);\n     },\n     [debouncedLoadOptions],\n   );\n"
                },
                {
                    "date": 1717840338514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n   ); // 1 second debounce\n \n   const loadOptions = useCallback(\n     (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n-      debouncedLoadOptions(inputValue, callback);\n+      await debouncedLoadOptions(inputValue, callback);\n     },\n     [debouncedLoadOptions],\n   );\n \n"
                },
                {
                    "date": 1717840357527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     1000,\n   ); // 1 second debounce\n \n   const loadOptions = useCallback(\n-    (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n+    async (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n       await debouncedLoadOptions(inputValue, callback);\n     },\n     [debouncedLoadOptions],\n   );\n"
                },
                {
                    "date": 1717840375455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n     1000,\n   ); // 1 second debounce\n \n   const loadOptions = useCallback(\n-    async (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n-      await debouncedLoadOptions(inputValue, callback);\n+    (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n+      debouncedLoadOptions(inputValue, callback);\n     },\n     [debouncedLoadOptions],\n   );\n \n"
                },
                {
                    "date": 1717840517576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-import React, { useState, useCallback } from 'react';\n+import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -26,48 +25,24 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const debouncedLoadOptions = useDebouncedCallback(\n-    async (\n-      inputValue: string,\n-      callback: (options: StocksSelectOption[]) => void,\n-    ) => {\n-      if (!inputValue?.length) {\n-        callback([]);\n-        return;\n-      }\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n \n-      // update input value to trigger refetch (background), works like prefetch\n-      setInputValue(inputValue);\n+    setInputValue(inputValue);\n \n-      // get cached data if there is any\n-      const queryKey = ['tickers', inputValue];\n-      const cachedData =\n-        queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-      if (cachedData) {\n-        callback(cachedData);\n-        return;\n-      }\n+    // prevent dupliate network rrequests\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n \n-      // if no cached data, manual fetch and return res\n-      const result = await queryClient.fetchQuery({\n-        queryKey,\n-        queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-      });\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    });\n+  };\n \n-      callback(result);\n-    },\n-    1000,\n-  ); // 1 second debounce\n-\n-  const loadOptions = useCallback(\n-    (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n-      debouncedLoadOptions(inputValue, callback);\n-    },\n-    [debouncedLoadOptions],\n-  );\n-\n   const noOptionsMessage = () => {\n     if (isError) {\n       return 'Please wait before searching again.';\n     }\n"
                },
                {
                    "date": 1717840538555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import React, { useState } from 'react';\n+import React, { useState, useCallback } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -25,22 +26,28 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n+  const debouncedFetch = useDebouncedCallback(async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n+    // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n \n-    // prevent dupliate network rrequests\n+    // get cached data if there is any\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n+    // if no cached data, manual fetch and return res\n     return await queryClient.fetchQuery({\n       queryKey,\n       queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n+  }, 1000); // 1 second debounce\n+\n+  const loadOptions = (inputValue: string) => {\n+    return debouncedFetch(inputValue);\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717840647239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-import React, { useState, useCallback } from 'react';\n+import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -26,28 +25,22 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const debouncedFetch = useDebouncedCallback(async (inputValue: string) => {\n+  const loadOptions = async (inputValue: string) => {\n     if (!inputValue?.length) return [];\n \n-    // update input value to trigger refetch (background), works like prefetch\n     setInputValue(inputValue);\n \n-    // get cached data if there is any\n+    // prevent dupliate network rrequests\n     const queryKey = ['tickers', inputValue];\n     const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n     if (cachedData) return cachedData;\n \n-    // if no cached data, manual fetch and return res\n     return await queryClient.fetchQuery({\n       queryKey,\n       queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n     });\n-  }, 1000); // 1 second debounce\n-\n-  const loadOptions = (inputValue: string) => {\n-    return debouncedFetch(inputValue);\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717840780262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n+import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -25,22 +26,43 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const loadOptions = async (inputValue: string) => {\n-    if (!inputValue?.length) return [];\n+  const debouncedFetch = useDebouncedCallback(\n+    (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n+      const fetchData = async () => {\n+        if (!inputValue?.length) {\n+          callback([]);\n+          return;\n+        }\n \n-    setInputValue(inputValue);\n+        // get cached data if there is any\n+        const queryKey = ['tickers', inputValue];\n+        const cachedData =\n+          queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+        if (cachedData) {\n+          callback(cachedData);\n+          return;\n+        }\n \n-    // prevent dupliate network rrequests\n-    const queryKey = ['tickers', inputValue];\n-    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-    if (cachedData) return cachedData;\n+        // if no cached data, manual fetch and return res\n+        const fetchedData = await queryClient.fetchQuery({\n+          queryKey,\n+          queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+        });\n+        callback(fetchedData);\n+      };\n \n-    return await queryClient.fetchQuery({\n-      queryKey,\n-      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-    });\n+      fetchData();\n+    },\n+    1000, // 1 second debounce\n+  );\n+\n+  const loadOptions = (\n+    inputValue: string,\n+    callback: (options: StocksSelectOption[]) => void,\n+  ) => {\n+    debouncedFetch(inputValue, callback);\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717840880314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState } from 'react';\n import { useQueryClient } from '@tanstack/react-query';\n-import { useDebouncedCallback } from 'use-debounce';\n import AsyncSelect from '@/lib/components/AsyncSelect';\n import type { ActionMeta, SingleValue } from 'react-select';\n import useFetchTickers, { fetchTickers } from './StocksAsyncSelect.hooks';\n \n@@ -26,43 +25,22 @@\n   const queryClient = useQueryClient();\n \n   const { data: cachedData, isError } = useFetchTickers(inputValue);\n \n-  const debouncedFetch = useDebouncedCallback(\n-    (inputValue: string, callback: (options: StocksSelectOption[]) => void) => {\n-      const fetchData = async () => {\n-        if (!inputValue?.length) {\n-          callback([]);\n-          return;\n-        }\n+  const loadOptions = async (inputValue: string) => {\n+    if (!inputValue?.length) return [];\n \n-        // get cached data if there is any\n-        const queryKey = ['tickers', inputValue];\n-        const cachedData =\n-          queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n-        if (cachedData) {\n-          callback(cachedData);\n-          return;\n-        }\n+    setInputValue(inputValue);\n \n-        // if no cached data, manual fetch and return res\n-        const fetchedData = await queryClient.fetchQuery({\n-          queryKey,\n-          queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n-        });\n-        callback(fetchedData);\n-      };\n+    // prevent dupliate network rrequests\n+    const queryKey = ['tickers', inputValue];\n+    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n+    if (cachedData) return cachedData;\n \n-      fetchData();\n-    },\n-    1000, // 1 second debounce\n-  );\n-\n-  const loadOptions = (\n-    inputValue: string,\n-    callback: (options: StocksSelectOption[]) => void,\n-  ) => {\n-    debouncedFetch(inputValue, callback);\n+    return await queryClient.fetchQuery({\n+      queryKey,\n+      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n+    });\n   };\n \n   const noOptionsMessage = () => {\n     if (isError) {\n"
                },
                {
                    "date": 1717853671314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n \n const StocksAsyncSelect: React.FC<StocksAsyncSelectProps> = ({\n   onChange,\n   isDisabled,\n+  className,\n }) => {\n   const [inputValue, setInputValue] = useState('');\n   const queryClient = useQueryClient();\n \n@@ -57,8 +58,9 @@\n       onChange={onChange}\n       loadOptions={loadOptions}\n       isMulti={false}\n       isDisabled={isDisabled}\n+      className={className}\n     />\n   );\n };\n \n"
                },
                {
                    "date": 1717853679899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n   value: string;\n }\n \n interface StocksAsyncSelectProps {\n+  className?: string;\n   onChange: (\n     newValue: SingleValue<StocksSelectOption>,\n     actionMeta: ActionMeta<StocksSelectOption>,\n   ) => void;\n"
                }
            ],
            "date": 1717815941674,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport TickersService from '@/api/services/Tickers';\nimport { useQueryClient, useQuery } from '@tanstack/react-query';\nimport { useDebounce } from 'use-debounce';\nimport AsyncSelect from '@/lib/components/AsyncSelect';\nimport type { ActionMeta, SingleValue } from 'react-select';\n\nexport interface StocksSelectOption {\n  label: string;\n  value: string;\n}\n\ninterface StocksAsyncSelectProps {\n  onChange: (\n    newValue: SingleValue<StocksSelectOption>,\n    actionMeta: ActionMeta<StocksSelectOption>,\n  ) => void;\n  isDisabled?: boolean;\n}\n\nconst fetchTickers = async (\n  search: string,\n  signal?: AbortSignal,\n): Promise<StocksSelectOption[]> => {\n  const queryParams = {\n    search,\n    locale: 'us',\n    limit: 20,\n    market: 'stocks',\n    type: 'CS',\n  };\n  try {\n    const response = await TickersService.tickers(queryParams, signal);\n    return response.data.results.map((ticker) => ({\n      label: `${ticker.name} (${ticker.ticker})`,\n      value: ticker.ticker,\n    }));\n  } catch (e) {\n    throw new Error(e as string);\n  }\n};\n\nconst useFetchTickers = (search: string) => {\n  return useQuery({\n    queryKey: ['tickers', search],\n    queryFn: ({ signal }) => fetchTickers(search, signal),\n    enabled: !!search,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n};\n\nconst StocksAsyncSelect: React.FC<StocksAsyncSelectProps> = ({\n  onChange,\n  isDisabled,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [debouncedInputValue] = useDebounce(inputValue, 500); // 500ms debounce\n  const queryClient = useQueryClient();\n\n  const { data: cachedData, isError } = useFetchTickers(debouncedInputValue);\n\n  const loadOptions = async (inputValue: string) => {\n    if (!inputValue?.length) return [];\n\n    // update input value to trigger debounce\n    setInputValue(inputValue);\n\n    // get cached data if found\n    const queryKey = ['tickers', inputValue];\n    const cachedData = queryClient.getQueryData<StocksSelectOption[]>(queryKey);\n    if (cachedData) return cachedData;\n\n    return await queryClient.fetchQuery({\n      queryKey,\n      queryFn: ({ signal }) => fetchTickers(inputValue, signal),\n    });\n  };\n\n  const noOptionsMessage = () => {\n    if (isError) {\n      return 'Please wait before searching again.';\n    }\n    return 'No stocks found';\n  };\n\n  return (\n    <AsyncSelect\n      placeholder=\"Type to search stocks ...\"\n      defaultOptions={cachedData ?? []}\n      noOptionsMessage={noOptionsMessage}\n      onChange={onChange}\n      loadOptions={loadOptions}\n      isMulti={false}\n      isDisabled={isDisabled}\n    />\n  );\n};\n\nexport default StocksAsyncSelect;\n"
        }
    ]
}