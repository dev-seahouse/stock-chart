{
    "sourceFile": "src/components/DateRangePicker.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1717843014458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717843020211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,12 +39,12 @@\n \n   return (\n     <div\n       className={`\n-      flex w-full items-center gap-2\n+        flex w-full items-center gap-2\n \n-      md:w-auto\n-    `}\n+        md:w-auto\n+      `}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n@@ -59,12 +59,12 @@\n             onClick={() => setIsFromPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-              size-4 text-gray-500\n+                size-4 text-gray-500\n \n-              dark:text-gray-400\n-            `}\n+                dark:text-gray-400\n+              `}\n             />\n             {DateTime.fromJSDate(dateRange.start).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -77,12 +77,12 @@\n         </PopoverContent>\n       </Popover>\n       <span\n         className={`\n-        text-gray-800\n+          text-gray-800\n \n-        dark:text-gray-200\n-      `}\n+          dark:text-gray-200\n+        `}\n       >\n         to\n       </span>\n       <Popover open={isToPopoverOpen} onOpenChange={setIsToPopoverOpen}>\n@@ -99,12 +99,12 @@\n             onClick={() => setIsToPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-              size-4 text-gray-500\n+                size-4 text-gray-500\n \n-              dark:text-gray-400\n-            `}\n+                dark:text-gray-400\n+              `}\n             />\n             {DateTime.fromJSDate(dateRange.end).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n"
                },
                {
                    "date": 1717843421185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,20 +4,22 @@\n   Popover,\n   PopoverContent,\n   PopoverTrigger,\n } from '@/lib/components/Popover.tsx';\n-import { Calendar } from '@/lib/components/Calendar.tsx';\n+import { Calendar, type CalendarProps } from '@/lib/components/Calendar.tsx';\n import { Button } from '@/lib/components/Button.tsx';\n import { CalendarDaysIcon } from 'lucide-react';\n \n interface DateRangePickerProps {\n   dateRange: { start: Date; end: Date };\n   onDateChange: (start: Date, end: Date) => void;\n+  calendarProps?: CalendarProps;\n }\n \n const DateRangePicker: React.FC<DateRangePickerProps> = ({\n   dateRange,\n   onDateChange,\n+  calendarProps,\n }) => {\n   const [isFromPopoverOpen, setIsFromPopoverOpen] = useState(false);\n   const [isToPopoverOpen, setIsToPopoverOpen] = useState(false);\n \n@@ -36,15 +38,17 @@\n     onDateChange(newStartDate, newToDate);\n     setIsToPopoverOpen(false);\n   };\n \n+  const today = DateTime.now().toJSDate();\n+\n   return (\n     <div\n       className={`\n-        flex w-full items-center gap-2\n+      flex w-full items-center gap-2\n \n-        md:w-auto\n-      `}\n+      md:w-auto\n+    `}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n@@ -59,12 +63,12 @@\n             onClick={() => setIsFromPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-                size-4 text-gray-500\n+              size-4 text-gray-500\n \n-                dark:text-gray-400\n-              `}\n+              dark:text-gray-400\n+            `}\n             />\n             {DateTime.fromJSDate(dateRange.start).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -72,17 +76,19 @@\n           <Calendar\n             selected={dateRange.start}\n             mode=\"single\"\n             onSelect={handleFromDateChange}\n+            disabled={{ after: today }}\n+            {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n       <span\n         className={`\n-          text-gray-800\n+        text-gray-800\n \n-          dark:text-gray-200\n-        `}\n+        dark:text-gray-200\n+      `}\n       >\n         to\n       </span>\n       <Popover open={isToPopoverOpen} onOpenChange={setIsToPopoverOpen}>\n@@ -99,12 +105,12 @@\n             onClick={() => setIsToPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-                size-4 text-gray-500\n+              size-4 text-gray-500\n \n-                dark:text-gray-400\n-              `}\n+              dark:text-gray-400\n+            `}\n             />\n             {DateTime.fromJSDate(dateRange.end).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -112,8 +118,10 @@\n           <Calendar\n             selected={dateRange.end}\n             mode=\"single\"\n             onSelect={handleToDateChange}\n+            disabled={{ after: today }}\n+            {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n     </div>\n"
                },
                {
                    "date": 1717843428813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,8 @@\n           <Calendar\n             selected={dateRange.end}\n             mode=\"single\"\n             onSelect={handleToDateChange}\n-            disabled={{ after: today }}\n             {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n"
                },
                {
                    "date": 1717843438586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,15 @@\n     onDateChange(newStartDate, newToDate);\n     setIsToPopoverOpen(false);\n   };\n \n-  const today = DateTime.now().toJSDate();\n-\n   return (\n     <div\n       className={`\n-      flex w-full items-center gap-2\n+        flex w-full items-center gap-2\n \n-      md:w-auto\n-    `}\n+        md:w-auto\n+      `}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n@@ -63,12 +61,12 @@\n             onClick={() => setIsFromPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-              size-4 text-gray-500\n+                size-4 text-gray-500\n \n-              dark:text-gray-400\n-            `}\n+                dark:text-gray-400\n+              `}\n             />\n             {DateTime.fromJSDate(dateRange.start).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -76,19 +74,18 @@\n           <Calendar\n             selected={dateRange.start}\n             mode=\"single\"\n             onSelect={handleFromDateChange}\n-            disabled={{ after: today }}\n             {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n       <span\n         className={`\n-        text-gray-800\n+          text-gray-800\n \n-        dark:text-gray-200\n-      `}\n+          dark:text-gray-200\n+        `}\n       >\n         to\n       </span>\n       <Popover open={isToPopoverOpen} onOpenChange={setIsToPopoverOpen}>\n@@ -105,12 +102,12 @@\n             onClick={() => setIsToPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-              size-4 text-gray-500\n+                size-4 text-gray-500\n \n-              dark:text-gray-400\n-            `}\n+                dark:text-gray-400\n+              `}\n             />\n             {DateTime.fromJSDate(dateRange.end).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n"
                },
                {
                    "date": 1717843452386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,15 +38,17 @@\n     onDateChange(newStartDate, newToDate);\n     setIsToPopoverOpen(false);\n   };\n \n+  const today = DateTime.now().toJSDate();\n+\n   return (\n     <div\n       className={`\n-        flex w-full items-center gap-2\n+      flex w-full items-center gap-2\n \n-        md:w-auto\n-      `}\n+      md:w-auto\n+    `}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n@@ -61,12 +63,12 @@\n             onClick={() => setIsFromPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-                size-4 text-gray-500\n+              size-4 text-gray-500\n \n-                dark:text-gray-400\n-              `}\n+              dark:text-gray-400\n+            `}\n             />\n             {DateTime.fromJSDate(dateRange.start).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -74,18 +76,19 @@\n           <Calendar\n             selected={dateRange.start}\n             mode=\"single\"\n             onSelect={handleFromDateChange}\n+            disabled={{ after: today }}\n             {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n       <span\n         className={`\n-          text-gray-800\n+        text-gray-800\n \n-          dark:text-gray-200\n-        `}\n+        dark:text-gray-200\n+      `}\n       >\n         to\n       </span>\n       <Popover open={isToPopoverOpen} onOpenChange={setIsToPopoverOpen}>\n@@ -102,12 +105,12 @@\n             onClick={() => setIsToPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-                size-4 text-gray-500\n+              size-4 text-gray-500\n \n-                dark:text-gray-400\n-              `}\n+              dark:text-gray-400\n+            `}\n             />\n             {DateTime.fromJSDate(dateRange.end).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -115,8 +118,9 @@\n           <Calendar\n             selected={dateRange.end}\n             mode=\"single\"\n             onSelect={handleToDateChange}\n+            disabled={{ after: today }}\n             {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n"
                },
                {
                    "date": 1717843528389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,15 @@\n     onDateChange(newStartDate, newToDate);\n     setIsToPopoverOpen(false);\n   };\n \n-  const today = DateTime.now().toJSDate();\n-\n   return (\n     <div\n       className={`\n-      flex w-full items-center gap-2\n+        flex w-full items-center gap-2\n \n-      md:w-auto\n-    `}\n+        md:w-auto\n+      `}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n@@ -63,12 +61,12 @@\n             onClick={() => setIsFromPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-              size-4 text-gray-500\n+                size-4 text-gray-500\n \n-              dark:text-gray-400\n-            `}\n+                dark:text-gray-400\n+              `}\n             />\n             {DateTime.fromJSDate(dateRange.start).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -76,19 +74,18 @@\n           <Calendar\n             selected={dateRange.start}\n             mode=\"single\"\n             onSelect={handleFromDateChange}\n-            disabled={{ after: today }}\n             {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n       <span\n         className={`\n-        text-gray-800\n+          text-gray-800\n \n-        dark:text-gray-200\n-      `}\n+          dark:text-gray-200\n+        `}\n       >\n         to\n       </span>\n       <Popover open={isToPopoverOpen} onOpenChange={setIsToPopoverOpen}>\n@@ -105,12 +102,12 @@\n             onClick={() => setIsToPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-              size-4 text-gray-500\n+                size-4 text-gray-500\n \n-              dark:text-gray-400\n-            `}\n+                dark:text-gray-400\n+              `}\n             />\n             {DateTime.fromJSDate(dateRange.end).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -118,9 +115,8 @@\n           <Calendar\n             selected={dateRange.end}\n             mode=\"single\"\n             onSelect={handleToDateChange}\n-            disabled={{ after: today }}\n             {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n"
                },
                {
                    "date": 1717843537138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,22 +4,20 @@\n   Popover,\n   PopoverContent,\n   PopoverTrigger,\n } from '@/lib/components/Popover.tsx';\n-import { Calendar, type CalendarProps } from '@/lib/components/Calendar.tsx';\n+import { Calendar } from '@/lib/components/Calendar.tsx';\n import { Button } from '@/lib/components/Button.tsx';\n import { CalendarDaysIcon } from 'lucide-react';\n \n interface DateRangePickerProps {\n   dateRange: { start: Date; end: Date };\n   onDateChange: (start: Date, end: Date) => void;\n-  calendarProps?: CalendarProps;\n }\n \n const DateRangePicker: React.FC<DateRangePickerProps> = ({\n   dateRange,\n   onDateChange,\n-  calendarProps,\n }) => {\n   const [isFromPopoverOpen, setIsFromPopoverOpen] = useState(false);\n   const [isToPopoverOpen, setIsToPopoverOpen] = useState(false);\n \n@@ -74,9 +72,8 @@\n           <Calendar\n             selected={dateRange.start}\n             mode=\"single\"\n             onSelect={handleFromDateChange}\n-            {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n       <span\n@@ -115,9 +112,8 @@\n           <Calendar\n             selected={dateRange.end}\n             mode=\"single\"\n             onSelect={handleToDateChange}\n-            {...calendarProps}\n           />\n         </PopoverContent>\n       </Popover>\n     </div>\n"
                },
                {
                    "date": 1717843577904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,9 @@\n   dateRange: { start: Date; end: Date };\n   onDateChange: (start: Date, end: Date) => void;\n }\n \n-const DateRangePicker: React.FC<DateRangePickerProps> = ({\n-  dateRange,\n-  onDateChange,\n-}) => {\n+function DateRangePicker({ dateRange, onDateChange }: DateRangePickerProps) {\n   const [isFromPopoverOpen, setIsFromPopoverOpen] = useState(false);\n   const [isToPopoverOpen, setIsToPopoverOpen] = useState(false);\n \n   const handleFromDateChange = (newFromDate: Date | undefined) => {\n@@ -39,32 +36,32 @@\n \n   return (\n     <div\n       className={`\n-        flex w-full items-center gap-2\n+              flex w-full items-center gap-2\n \n-        md:w-auto\n-      `}\n+              md:w-auto\n+            `}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n             variant=\"outline\"\n             className={`\n-              flex w-full items-center gap-2 text-gray-800\n+                          flex w-full items-center gap-2 text-gray-800\n \n-              dark:text-gray-200\n+                          dark:text-gray-200\n \n-              md:w-auto\n-            `}\n+                          md:w-auto\n+                        `}\n             onClick={() => setIsFromPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-                size-4 text-gray-500\n+                              size-4 text-gray-500\n \n-                dark:text-gray-400\n-              `}\n+                              dark:text-gray-400\n+                            `}\n             />\n             {DateTime.fromJSDate(dateRange.start).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -77,34 +74,34 @@\n         </PopoverContent>\n       </Popover>\n       <span\n         className={`\n-          text-gray-800\n+                  text-gray-800\n \n-          dark:text-gray-200\n-        `}\n+                  dark:text-gray-200\n+                `}\n       >\n         to\n       </span>\n       <Popover open={isToPopoverOpen} onOpenChange={setIsToPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n             variant=\"outline\"\n             className={`\n-              flex w-full items-center gap-2 text-gray-800\n+                          flex w-full items-center gap-2 text-gray-800\n \n-              dark:text-gray-200\n+                          dark:text-gray-200\n \n-              md:w-auto\n-            `}\n+                          md:w-auto\n+                        `}\n             onClick={() => setIsToPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-                size-4 text-gray-500\n+                              size-4 text-gray-500\n \n-                dark:text-gray-400\n-              `}\n+                              dark:text-gray-400\n+                            `}\n             />\n             {DateTime.fromJSDate(dateRange.end).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -117,7 +114,7 @@\n         </PopoverContent>\n       </Popover>\n     </div>\n   );\n-};\n+}\n \n export default DateRangePicker;\n"
                },
                {
                    "date": 1717843593344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n \n interface DateRangePickerProps {\n   dateRange: { start: Date; end: Date };\n   onDateChange: (start: Date, end: Date) => void;\n+  className?: string;\n }\n \n function DateRangePicker({ dateRange, onDateChange }: DateRangePickerProps) {\n   const [isFromPopoverOpen, setIsFromPopoverOpen] = useState(false);\n@@ -36,32 +37,32 @@\n \n   return (\n     <div\n       className={`\n-              flex w-full items-center gap-2\n+        flex w-full items-center gap-2\n \n-              md:w-auto\n-            `}\n+        md:w-auto\n+      `}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n             variant=\"outline\"\n             className={`\n-                          flex w-full items-center gap-2 text-gray-800\n+              flex w-full items-center gap-2 text-gray-800\n \n-                          dark:text-gray-200\n+              dark:text-gray-200\n \n-                          md:w-auto\n-                        `}\n+              md:w-auto\n+            `}\n             onClick={() => setIsFromPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-                              size-4 text-gray-500\n+                size-4 text-gray-500\n \n-                              dark:text-gray-400\n-                            `}\n+                dark:text-gray-400\n+              `}\n             />\n             {DateTime.fromJSDate(dateRange.start).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n@@ -74,34 +75,34 @@\n         </PopoverContent>\n       </Popover>\n       <span\n         className={`\n-                  text-gray-800\n+          text-gray-800\n \n-                  dark:text-gray-200\n-                `}\n+          dark:text-gray-200\n+        `}\n       >\n         to\n       </span>\n       <Popover open={isToPopoverOpen} onOpenChange={setIsToPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n             variant=\"outline\"\n             className={`\n-                          flex w-full items-center gap-2 text-gray-800\n+              flex w-full items-center gap-2 text-gray-800\n \n-                          dark:text-gray-200\n+              dark:text-gray-200\n \n-                          md:w-auto\n-                        `}\n+              md:w-auto\n+            `}\n             onClick={() => setIsToPopoverOpen(true)}\n           >\n             <CalendarDaysIcon\n               className={`\n-                              size-4 text-gray-500\n+                size-4 text-gray-500\n \n-                              dark:text-gray-400\n-                            `}\n+                dark:text-gray-400\n+              `}\n             />\n             {DateTime.fromJSDate(dateRange.end).toFormat('dd/MM/yyyy')}\n           </Button>\n         </PopoverTrigger>\n"
                },
                {
                    "date": 1717843607340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n } from '@/lib/components/Popover.tsx';\n import { Calendar } from '@/lib/components/Calendar.tsx';\n import { Button } from '@/lib/components/Button.tsx';\n import { CalendarDaysIcon } from 'lucide-react';\n+import { cn } from '@/lib/utils';\n \n interface DateRangePickerProps {\n   dateRange: { start: Date; end: Date };\n   onDateChange: (start: Date, end: Date) => void;\n@@ -36,13 +37,13 @@\n   };\n \n   return (\n     <div\n-      className={`\n+      className={cn(`\n         flex w-full items-center gap-2\n \n         md:w-auto\n-      `}\n+      `, class)}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n"
                },
                {
                    "date": 1717843615756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,13 @@\n   onDateChange: (start: Date, end: Date) => void;\n   className?: string;\n }\n \n-function DateRangePicker({ dateRange, onDateChange }: DateRangePickerProps) {\n+function DateRangePicker({\n+  dateRange,\n+  onDateChange,\n+  className,\n+}: DateRangePickerProps) {\n   const [isFromPopoverOpen, setIsFromPopoverOpen] = useState(false);\n   const [isToPopoverOpen, setIsToPopoverOpen] = useState(false);\n \n   const handleFromDateChange = (newFromDate: Date | undefined) => {\n@@ -37,13 +41,16 @@\n   };\n \n   return (\n     <div\n-      className={cn(`\n+      className={cn(\n+        `\n         flex w-full items-center gap-2\n \n         md:w-auto\n-      `, class)}\n+      `,\n+        className,\n+      )}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n"
                },
                {
                    "date": 1717843817335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,9 @@\n   onDateChange: (start: Date, end: Date) => void;\n   className?: string;\n }\n \n-function DateRangePicker({\n-  dateRange,\n-  onDateChange,\n-  className,\n-}: DateRangePickerProps) {\n+function DateRangePicker({ dateRange, onDateChange }: DateRangePickerProps) {\n   const [isFromPopoverOpen, setIsFromPopoverOpen] = useState(false);\n   const [isToPopoverOpen, setIsToPopoverOpen] = useState(false);\n \n   const handleFromDateChange = (newFromDate: Date | undefined) => {\n@@ -43,13 +39,12 @@\n   return (\n     <div\n       className={cn(\n         `\n-        flex w-full items-center gap-2\n+          flex w-full items-center gap-2\n \n-        md:w-auto\n-      `,\n-        className,\n+          md:w-auto\n+        `,\n       )}\n     >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n"
                },
                {
                    "date": 1717843877828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,17 +36,9 @@\n     setIsToPopoverOpen(false);\n   };\n \n   return (\n-    <div\n-      className={cn(\n-        `\n-          flex w-full items-center gap-2\n-\n-          md:w-auto\n-        `,\n-      )}\n-    >\n+   \n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n             variant=\"outline\"\n@@ -116,9 +108,8 @@\n             onSelect={handleToDateChange}\n           />\n         </PopoverContent>\n       </Popover>\n-    </div>\n   );\n }\n \n export default DateRangePicker;\n"
                },
                {
                    "date": 1717843900487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     setIsToPopoverOpen(false);\n   };\n \n   return (\n-   \n+    <>\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n             variant=\"outline\"\n@@ -108,8 +108,9 @@\n             onSelect={handleToDateChange}\n           />\n         </PopoverContent>\n       </Popover>\n+    </>\n   );\n }\n \n export default DateRangePicker;\n"
                },
                {
                    "date": 1717843913903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,17 @@\n     setIsToPopoverOpen(false);\n   };\n \n   return (\n-    <>\n+    <div\n+      className={cn(\n+        `\n+          flex w-full items-center gap-2\n+\n+          md:w-auto\n+        `,\n+      )}\n+    >\n       <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n         <PopoverTrigger asChild>\n           <Button\n             variant=\"outline\"\n@@ -108,9 +116,9 @@\n             onSelect={handleToDateChange}\n           />\n         </PopoverContent>\n       </Popover>\n-    </>\n+    </div>\n   );\n }\n \n export default DateRangePicker;\n"
                },
                {
                    "date": 1717843996138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   return (\n     <div\n       className={cn(\n         `\n-          flex w-full items-center gap-2\n+          flex items-center gap-2\n \n           md:w-auto\n         `,\n       )}\n"
                },
                {
                    "date": 1717844048529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   return (\n     <div\n       className={cn(\n         `\n-          flex items-center gap-2\n+          flex w-full items-center gap-2\n \n           md:w-auto\n         `,\n       )}\n"
                },
                {
                    "date": 1717844991807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from 'react';\n+import { useState } from 'react';\n import { DateTime } from 'luxon';\n import {\n   Popover,\n   PopoverContent,\n"
                }
            ],
            "date": 1717843014458,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { DateTime } from 'luxon';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/lib/components/Popover.tsx';\nimport { Calendar } from '@/lib/components/Calendar.tsx';\nimport { Button } from '@/lib/components/Button.tsx';\nimport { CalendarDaysIcon } from 'lucide-react';\n\ninterface DateRangePickerProps {\n  dateRange: { start: Date; end: Date };\n  onDateChange: (start: Date, end: Date) => void;\n}\n\nconst DateRangePicker: React.FC<DateRangePickerProps> = ({\n  dateRange,\n  onDateChange,\n}) => {\n  const [isFromPopoverOpen, setIsFromPopoverOpen] = useState(false);\n  const [isToPopoverOpen, setIsToPopoverOpen] = useState(false);\n\n  const handleFromDateChange = (newFromDate: Date | undefined) => {\n    if (!newFromDate) return;\n    const newEndDate =\n      newFromDate > dateRange.end ? newFromDate : dateRange.end;\n    onDateChange(newFromDate, newEndDate);\n    setIsFromPopoverOpen(false);\n  };\n\n  const handleToDateChange = (newToDate: Date | undefined) => {\n    if (!newToDate) return;\n    const newStartDate =\n      newToDate < dateRange.start ? newToDate : dateRange.start;\n    onDateChange(newStartDate, newToDate);\n    setIsToPopoverOpen(false);\n  };\n\n  return (\n    <div\n      className={`\n      flex w-full items-center gap-2\n\n      md:w-auto\n    `}\n    >\n      <Popover open={isFromPopoverOpen} onOpenChange={setIsFromPopoverOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            className={`\n              flex w-full items-center gap-2 text-gray-800\n\n              dark:text-gray-200\n\n              md:w-auto\n            `}\n            onClick={() => setIsFromPopoverOpen(true)}\n          >\n            <CalendarDaysIcon\n              className={`\n              size-4 text-gray-500\n\n              dark:text-gray-400\n            `}\n            />\n            {DateTime.fromJSDate(dateRange.start).toFormat('dd/MM/yyyy')}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"max-w-[276px] p-0\">\n          <Calendar\n            selected={dateRange.start}\n            mode=\"single\"\n            onSelect={handleFromDateChange}\n          />\n        </PopoverContent>\n      </Popover>\n      <span\n        className={`\n        text-gray-800\n\n        dark:text-gray-200\n      `}\n      >\n        to\n      </span>\n      <Popover open={isToPopoverOpen} onOpenChange={setIsToPopoverOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            className={`\n              flex w-full items-center gap-2 text-gray-800\n\n              dark:text-gray-200\n\n              md:w-auto\n            `}\n            onClick={() => setIsToPopoverOpen(true)}\n          >\n            <CalendarDaysIcon\n              className={`\n              size-4 text-gray-500\n\n              dark:text-gray-400\n            `}\n            />\n            {DateTime.fromJSDate(dateRange.end).toFormat('dd/MM/yyyy')}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"max-w-[276px] p-0\">\n          <Calendar\n            selected={dateRange.end}\n            mode=\"single\"\n            onSelect={handleToDateChange}\n          />\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n};\n\nexport default DateRangePicker;\n"
        }
    ]
}